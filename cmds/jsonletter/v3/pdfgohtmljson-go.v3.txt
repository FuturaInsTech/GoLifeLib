// pdfgohtmljson.exe program code version 3
// Usage: pdfgohtmljson <base_filename> // without extension of .htm
// In v2 added <E> Equals eq, <N> NotEquals ne, <C> Contains, <I> In and <O> Out Variations
// In v3 using [OP] and [OL] html file is split and merged to handle orientation
// In v3 used -outfile.html -hfile.html and -ffile.html temp files in PDF Generation 

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"html/template"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/pdfcpu/pdfcpu/pkg/api"
)

func formatInteger(famt string, ctype byte) string {
	// Handle the Indian and Western numbering formats
	n := len(famt)
	if n <= 3 {
		// No formatting needed for numbers with 3 or fewer digits
		return famt
	}

	// Format the first three digits (thousands)
	result := famt[n-3:]

	if ctype == 'a' || ctype == 'A' {
		// Format the remaining digits in groups of two (lakhs, crores, etc.)
		for i := n - 3; i > 0; i -= 2 {
			start := i - 2
			if start < 0 {
				start = 0
			}
			result = famt[start:i] + "," + result
		}
	}
	if ctype == 'c' || ctype == 'C' {
		// Format the remaining digits in groups of three (millions, billions, etc.)
		for i := n - 3; i > 0; i -= 3 {
			start := i - 3
			if start < 0 {
				start = 0
			}
			result = famt[start:i] + "," + result
		}
	}

	// Return the formatted integer
	return result
}

func formatDecimal(famt string, ctype byte) string {
	decimalpart := ""
	decimallen, _ := strconv.Atoi(string(ctype))
	//damt, _ := strconv.Atoi(string(famt))
	var decimalFloat float64 = 0
	if decimallen == 0 {
		decimalFloat, _ = strconv.ParseFloat("0."+"0", 64)
	} else {
		decimalFloat, _ = strconv.ParseFloat("0."+string(famt), 64)
	}
	if decimallen == 0 {
		return decimalpart
	} else {
		formatString := fmt.Sprintf("%%.%df", decimallen) // Generate format string
		decimalpart = fmt.Sprintf(formatString, decimalFloat)
		decimalpart = decimalpart[1:] // Remove the leading "0"
		return decimalpart
	}
}

func formatNumber(value interface{}, fds string) string {
	integralpart := ""
	decimalpart := ""
	famt := ""
	famount := ""
	decimallen, _ := strconv.Atoi(string(fds[1]))
	if _, ok := value.(float64); ok {
		famt = strconv.FormatFloat(value.(float64), 'f', decimallen, 64) // Format float64 with d decimal places
	}
	if _, ok := value.(int); ok {
		famt = strconv.FormatFloat(float64(value.(int)), 'f', decimallen, 64) // Format float64 with d decimal places
	}
	if _, ok := value.(string); ok {
		famt = value.(string)
	}
	parts := strings.Split(famt, ".")
	if fds[0] == 'a' || fds[0] == 'A' {
		integralpart = formatInteger(parts[0], fds[0])
	} else if fds[0] == 'c' || fds[0] == 'C' {
		integralpart = formatInteger(parts[0], fds[0])
	} else if fds[0] == 'd' || fds[0] == 'D' {
		integralpart = parts[0]
	} else {
		integralpart = parts[0]
	}

	if len(parts) > 1 {
		decimalpart = formatDecimal(parts[1], fds[1])
		famount = integralpart + decimalpart
	} else {
		famount = integralpart
	}
	return fmt.Sprintf("%s", famount) // Format float64 with 2 decimal places and comma separators
}

// Custom template functions
func createFuncMap() template.FuncMap {
	return template.FuncMap{
		"formatNumber": formatNumber,
		"contains":     strings.Contains,
		"eq": func(a, b interface{}) bool {
			return fmt.Sprintf("%v", a) == fmt.Sprintf("%v", b)
		},
		"ne": func(a, b interface{}) bool {
			return fmt.Sprintf("%v", a) != fmt.Sprintf("%v", b)
		},
		"in": func(val interface{}, options ...interface{}) bool {
			valStr := fmt.Sprintf("%v", val)
			for _, opt := range options {
				if valStr == fmt.Sprintf("%v", opt) {
					return true
				}
			}
			return false
		},
		"out": func(val string, options ...interface{}) bool {
			valStr := fmt.Sprintf("%v", val)
			for _, opt := range options {
				if valStr == fmt.Sprintf("%v", opt) {
					return false
				}
			}
			return true
		},
	}
}

// Function to check if required files exist
func checkGOHTMLFilesExist(arg string) {

	jFile := arg + ".json"
	gFile := arg + ".gohtml"
	hgFile := arg + "-h.gohtml"
	fgFile := arg + "-f.gohtml"

	// Check for JSON file
	if _, err := os.Stat(jFile); os.IsNotExist(err) {
		fmt.Printf("Error: File '%s' does not exist.\n", jFile)
		os.Exit(1)
	}

	// Check for GOHTML File
	if _, err := os.Stat(gFile); os.IsNotExist(err) {
		fmt.Printf("Error: File '%s' does not exist.\n", gFile)
		os.Exit(1)
	}

	// Check for Header GOHTML File
	if _, err := os.Stat(hgFile); os.IsNotExist(err) {
		fmt.Printf("Error: File '%s' does not exist.\n", hgFile)
		os.Exit(1)
	}

	// Check for Footer GOHTML File
	if _, err := os.Stat(fgFile); os.IsNotExist(err) {
		fmt.Printf("Error: File '%s' does not exist.\n", fgFile)
		os.Exit(1)
	}
	// Continue processing...
	fmt.Printf("All Input files '%s','%s','%s' and '%s' exist. Start Processing...\n", jFile, gFile, hgFile, fgFile)
}

// EnsurePageBreakCSS makes sure the <style> for .page-break exists exactly once.
// If not found, it inserts it inside <head>...</head>.
func EnsurePageBreakCSS(htmlContent string) string {
	pageBreakCSS := `
<style>
.page-break {
  page-break-before: always;
}
</style>`

	// If .page-break CSS already exists, do nothing.
	if strings.Contains(htmlContent, ".page-break") {
		return htmlContent
	}

	// Try to insert before </head>. If no <head>, add at the beginning.
	if strings.Contains(htmlContent, "</head>") {
		return strings.Replace(htmlContent, "</head>", pageBreakCSS+"\n</head>", 1)
	}

	// If no <head>, just prepend at the top.
	return pageBreakCSS + "\n" + htmlContent
}

func createhtml(gohtmlFile string, jsonFile string, imgFolder string, outFile string) (err error) {
	// Read the HTML file
	jsonData, err := os.ReadFile(jsonFile)
	if err != nil {
		return err
	}

	// Parse JSON into a map
	var data map[string]interface{}
	err = json.Unmarshal(jsonData, &data)
	if err != nil {
		return err
	}

	// Get the current working directory
	cwdPath, err := os.Getwd()
	if err != nil {
		return err
	}

	iPath := filepath.Join(cwdPath, "static")
	imagePath := filepath.Join(iPath, imgFolder)

	// Read the gohtml file
	fileContent, err := os.ReadFile(gohtmlFile)
	if err != nil {
		return err
	}

	// Convert content to string and replace {{.Img}} before parsing
	modifiedContent := strings.ReplaceAll(string(fileContent), "{{.Img}}", imagePath)

	// Replace [PageBrk] with <div class="page-break"></div>
	// pagebrkContent := strings.ReplaceAll(string(imgContent), "[PageBrk]", `<div class="page-break"></div>`)

	// Ensure page break CSS is present
	// modifiedContent := EnsurePageBreakCSS(string(pagebrkContent))

	// Parse and execute template
	funcMap := createFuncMap()
	tmpl, err := template.New(gohtmlFile).Funcs(funcMap).Parse(string(modifiedContent))
	if err != nil {
		return err
	}

	// Execute template into a buffer first
	var buf bytes.Buffer
	err = tmpl.Execute(&buf, data)
	if err != nil {
		return err
	}

	// Check for <!DOCTYPE html> and insert if missing
	rendered := buf.String()
	if !strings.HasPrefix(strings.TrimSpace(rendered), "<!DOCTYPE") {
		rendered = "<!DOCTYPE html>\n" + rendered
	}

	// Write final HTML to output file
	err = os.WriteFile(outFile, []byte(rendered), 0644)
	if err != nil {
		return err
	}

	return nil
}

// Function to split the html file into multiple files by [OP] and [OL] marker tags
type Section struct {
	FileName    string
	Orientation string // "Portrait" or "Landscape"
}

// SplitHTMLByMarkers splits HTML by [OL], [OP], and .page-break
func SplitHTMLByMarkers(inputHTMLPath string) ([]Section, error) {
	content, err := os.ReadFile(inputHTMLPath)
	if err != nil {
		return nil, fmt.Errorf("read error: %w", err)
	}

	html := string(content)

	// Extract <style> block or entire <head> section
	styleStart := strings.Index(html, "<style")
	styleEnd := strings.Index(html, "</style>")
	var styleBlock string
	if styleStart != -1 && styleEnd != -1 {
		styleEnd += len("</style>")
		styleBlock = html[styleStart:styleEnd]
	} else {
		styleBlock = "" // Optional: log warning if not found
	}

	// Prepare <head> or inline style to inject into each split segment
	styleHeader := fmt.Sprintf("<head>%s</head>\n<body>", styleBlock)

	var sections []Section
	var orientation = "Portrait"

	splitMarkers := []string{"[OL]", "[OP]", `<div class="page-break">`}
	currentIndex := 0
	sectionIndex := 1

	for {
		nextSplitIndex := -1
		nextMarker := ""

		// Find next closest marker
		for _, marker := range splitMarkers {
			idx := strings.Index(html[currentIndex:], marker)
			if idx != -1 {
				idx += currentIndex // convert to absolute index
				if nextSplitIndex == -1 || idx < nextSplitIndex {
					nextSplitIndex = idx
					nextMarker = marker
				}
			}
		}

		// No more markers
		if nextSplitIndex == -1 {
			remaining := html[currentIndex:]
			if strings.TrimSpace(remaining) != "" {
				sectionFile := fmt.Sprintf("section_%d.html", sectionIndex)
				finalContent := injectStyle(styleHeader, remaining)
				if err := os.WriteFile(sectionFile, []byte(finalContent), 0644); err != nil {
					return nil, err
				}
				sections = append(sections, Section{sectionFile, orientation})
			}
			break
		}

		// Save content up to marker
		segment := html[currentIndex:nextSplitIndex]
		sectionFile := fmt.Sprintf("section_%d.html", sectionIndex)
		finalContent := injectStyle(styleHeader, segment)
		if err := os.WriteFile(sectionFile, []byte(finalContent), 0644); err != nil {
			return nil, err
		}
		sections = append(sections, Section{sectionFile, orientation})
		sectionIndex++

		// Update orientation if needed
		switch nextMarker {
		case "[OL]":
			orientation = "Landscape"
		case "[OP]":
			orientation = "Portrait"
		}

		// Skip marker length and continue
		currentIndex = nextSplitIndex + len(nextMarker)
	}

	return sections, nil
}

// injectStyle wraps segment in <html><head>...</head><body>...</body></html>
func injectStyle(styleHeader, bodyContent string) string {
	bodyTag := "<body>"
	bodyIdx := strings.Index(strings.ToLower(bodyContent), bodyTag)
	if bodyIdx != -1 {
		bodyContent = bodyContent[bodyIdx+len(bodyTag):]
	}
	return fmt.Sprintf("<html>%s\n%s\n</body></html>", styleHeader, bodyContent)
}

// func SplitHTMLByMarkers(inputHTMLPath string) ([]Section, error) {
// 	content, err := os.ReadFile(inputHTMLPath)
// 	if err != nil {
// 		return nil, fmt.Errorf("read error: %w", err)
// 	}

// 	html := string(content)
// 	var sections []Section
// 	var orientation = "Portrait"

// 	splitMarkers := []string{"[OL]", "[OP]", `<div class="page-break">`}
// 	currentIndex := 0
// 	sectionIndex := 1

// 	for {
// 		nextSplitIndex := -1
// 		nextMarker := ""

// 		// Find next closest marker
// 		for _, marker := range splitMarkers {
// 			idx := strings.Index(html[currentIndex:], marker)
// 			if idx != -1 {
// 				idx += currentIndex // convert to absolute index
// 				if nextSplitIndex == -1 || idx < nextSplitIndex {
// 					nextSplitIndex = idx
// 					nextMarker = marker
// 				}
// 			}
// 		}

// 		// No more markers
// 		if nextSplitIndex == -1 {
// 			remaining := html[currentIndex:]
// 			if strings.TrimSpace(remaining) != "" {
// 				sectionFile := fmt.Sprintf("section_%d.html", sectionIndex)
// 				if err := os.WriteFile(sectionFile, []byte(remaining), 0644); err != nil {
// 					return nil, err
// 				}
// 				sections = append(sections, Section{sectionFile, orientation})
// 			}
// 			break
// 		}

// 		// Save content up to marker
// 		segment := html[currentIndex:nextSplitIndex]
// 		sectionFile := fmt.Sprintf("section_%d.html", sectionIndex)
// 		if err := os.WriteFile(sectionFile, []byte(segment), 0644); err != nil {
// 			return nil, err
// 		}
// 		sections = append(sections, Section{sectionFile, orientation})
// 		sectionIndex++

// 		// Update orientation if needed
// 		switch nextMarker {
// 		case "[OL]":
// 			orientation = "Landscape"
// 		case "[OP]":
// 			orientation = "Portrait"
// 		}

// 		// Skip marker length and continue
// 		currentIndex = nextSplitIndex + len(nextMarker)
// 	}

// 	return sections, nil
// }

// func SplitHTMLByOrientationMarkers(inputHTMLPath string) ([]Section, error) {
// 	content, err := os.ReadFile(inputHTMLPath)
// 	if err != nil {
// 		return nil, fmt.Errorf("read error: %w", err)
// 	}

// 	html := string(content)
// 	var sections []Section
// 	var orientation = "Portrait"
// 	rem := html

// 	for i := 1; ; i++ {
// 		ol := strings.Index(rem, "[OL]")
// 		op := strings.Index(rem, "[OP]")

// 		var idx int
// 		var marker string

// 		if ol == -1 && op == -1 {
// 			if strings.TrimSpace(rem) != "" {
// 				fname := fmt.Sprintf("section_%d.html", i)
// 				if err := os.WriteFile(fname, []byte(rem), 0644); err != nil {
// 					return nil, err
// 				}
// 				sections = append(sections, Section{fname, orientation})
// 			}
// 			break
// 		} else if ol != -1 && (op == -1 || ol < op) {
// 			idx = ol
// 			marker = "[OL]"
// 		} else {
// 			idx = op
// 			marker = "[OP]"
// 		}

// 		content := rem[:idx]
// 		fname := fmt.Sprintf("section_%d.html", i)
// 		if err := os.WriteFile(fname, []byte(content), 0644); err != nil {
// 			return nil, err
// 		}
// 		sections = append(sections, Section{fname, orientation})

// 		if marker == "[OL]" {
// 			orientation = "Landscape"
// 		} else {
// 			orientation = "Portrait"
// 		}

// 		rem = rem[idx+len(marker):]
// 	}

// 	return sections, nil
// }

// func GenerateAndMergePDFsFromSections(sections []Section, outputPDF string) error {
// 	blankPDF := "blank.pdf"
// 	err := api.CreateDemoFile("A4P", blankPDF, nil)
// 	if err != nil {
// 		return fmt.Errorf("failed to create blank page: %w", err)
// 	}
// 	defer os.Remove(blankPDF)

// 	var pdfs []string

// 	for i, sec := range sections {
// 		outPDF := strings.Replace(sec.FileName, ".html", ".pdf", 1)

// 		cmd := exec.Command(
// 			"wkhtmltopdf",
// 			"--enable-local-file-access",
// 			"--header-html", hFile,
// 			"--footer-html", fFile,

// 			"--orientation", sec.Orientation,
// 			sec.FileName, outPDF,
// 		)

// 		var out, stderr bytes.Buffer
// 		cmd.Stdout = &out
// 		cmd.Stderr = &stderr

// 		err := cmd.Run()
// 		if err != nil {
// 			return fmt.Errorf("wkhtmltopdf failed (%s): %v\n%s", sec.FileName, err, stderr.String())
// 		}

// 		// Check for odd pages
// 		count, err := api.PageCountFile(outPDF, nil)
// 		if err != nil {
// 			return fmt.Errorf("page count failed for %s: %w", outPDF, err)
// 		}

// 		// Pad if odd
// 		if count%2 != 0 {
// 			err := api.InsertPagesFile(outPDF, "", []string{"end"}, blankPDF, nil)
// 			if err != nil {
// 				return fmt.Errorf("insert blank failed: %w", err)
// 			}
// 		}

// 		pdfs = append(pdfs, outPDF)
// 	}

// 	// Merge all PDFs
// 	err = api.MergeCreateFile(pdfs, outputPDF, nil)
// 	if err != nil {
// 		return fmt.Errorf("merge failed: %w", err)
// 	}

// 	// Remove section files
// 	for _, s := range sections {
// 		os.Remove(s.FileName)
// 		pdf := strings.Replace(s.FileName, ".html", ".pdf", 1)
// 		os.Remove(pdf)
// 	}

// 	// Remove any residual blank pages
// 	err = api.RemovePagesFile(outputPDF, outputPDF, []string{"blank"}, nil)
// 	if err != nil {
// 		return fmt.Errorf("remove blank failed: %w", err)
// 	}

// 	fmt.Println("✅ PDF created:", outputPDF)
// 	return nil
// }

func main() {
	var gohtmlFile string
	var hgohtmlFile string
	var fgohtmlFile string
	var jsonFile string
	var pdfFile string

	var outFile string
	var hFile string
	var fFile string
	var imgfolder string
	var himgfolder string
	var fimgfolder string

	var iFile string

	// Check the number of command-line arguments
	if len(os.Args) > 2 {
		fmt.Println("Error: Too many arguments provided. Please provide <basefilename> ...")
		fmt.Println("Usage: cmd <basefilename> ...")
	} else if len(os.Args) == 2 {
		iFile = os.Args[1]
	} else {
		fmt.Printf("Error: No arguments provided.\n")
		os.Exit(1)
	}

	gohtmlFile = iFile + ".gohtml"
	hgohtmlFile = iFile + "-h.gohtml"
	fgohtmlFile = iFile + "-f.gohtml"
	jsonFile = iFile + ".json"
	pdfFile = iFile + ".pdf"

	outFile = iFile + "-outfile.html"
	hFile = iFile + "-hfile.html"
	fFile = iFile + "-ffile.html"
	imgfolder = iFile
	himgfolder = iFile + "-h"
	fimgfolder = iFile + "-f"

	// Check if the required files exist
	checkGOHTMLFilesExist(iFile)
	fmt.Println("  In Progress...")

	err := createhtml(gohtmlFile, jsonFile, imgfolder, outFile)
	if err != nil {
		fmt.Println("HTML creation error:", err)
		return
	}
	err = createhtml(hgohtmlFile, jsonFile, himgfolder, hFile)
	if err != nil {
		fmt.Println("Header HTML creation error:", err)
		return
	}
	err = createhtml(fgohtmlFile, jsonFile, fimgfolder, fFile)
	if err != nil {
		fmt.Println("Footer HTML creation error:", err)
		return
	}

	// Load JSON config
	data, err := os.ReadFile(jsonFile)
	if err != nil {
		fmt.Println("Read jsonFile error:", err)
		return
	}

	var m map[string]interface{}
	err = json.Unmarshal(data, &m)
	if err != nil {
		fmt.Println("Unmarshal json data error:", err)
		return
	}

	// Get the current working directory
	cwdPath, err := os.Getwd()
	if err != nil {
		fmt.Println("Cannot find current working path:", err)
		return
	}

	hFile = filepath.Join(cwdPath, hFile)
	fFile = filepath.Join(cwdPath, fFile)
	outFile = filepath.Join(cwdPath, outFile)
	pdfFile = filepath.Join(cwdPath, pdfFile)

	sections, _ := SplitHTMLByMarkers(outFile)

	var pdfs []string

	for _, sec := range sections {
		outPDF := strings.Replace(sec.FileName, ".html", ".pdf", 1)

		cmd := exec.Command(
			"wkhtmltopdf",
			"--enable-local-file-access",
			"--header-html", hFile,
			"--footer-html", fFile,
			"--orientation", sec.Orientation,
			sec.FileName, outPDF,
		)

		var out, stderr bytes.Buffer
		cmd.Stdout = &out
		cmd.Stderr = &stderr

		err := cmd.Run()
		if err != nil {
			fmt.Printf("wkhtmltopdf failed (%s): %v\n%s", sec.FileName, err, stderr.String())
		}

		pdfs = append(pdfs, outPDF)
	}

	// Merge all PDFs
	err = api.MergeCreateFile(pdfs, pdfFile, false, nil)
	if err != nil {
		fmt.Println("merge failed: %w", err)
	}

	// Remove section files
	for _, s := range sections {
		os.Remove(s.FileName)
		pdf := strings.Replace(s.FileName, ".html", ".pdf", 1)
		os.Remove(pdf)
	}

	fmt.Println("PDF created:", pdfFile)
}
