// GoPro Tool to help developer
//   - generate param insert script
//   - Prepare excel layout for Word Doc Template manually
//   - creates a json file to use in gohtmljson utility

package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/xuri/excelize/v2"
)

// Sanitize removes invalid characters
func sanitize(text string) string {
	return strings.Map(func(r rune) rune {
		if r < 32 && r != '\n' && r != '\t' {
			return -1
		}
		return r
	}, text)
}

// Checks if a cell is in a range like A1:C3
func isCellInRange(cellRef, rangeRef string) bool {
	parts := strings.Split(rangeRef, ":")
	if len(parts) != 2 {
		return false
	}

	startCol, startRow, err1 := excelize.CellNameToCoordinates(parts[0])
	endCol, endRow, err2 := excelize.CellNameToCoordinates(parts[1])
	col, row, err3 := excelize.CellNameToCoordinates(cellRef)

	if err1 != nil || err2 != nil || err3 != nil {
		return false
	}

	return col >= startCol && col <= endCol && row >= startRow && row <= endRow
}

// Function to check if required files exist
func checkInputFilesExist(iFile string) {

	// Check for JSON file
	if _, err := os.Stat(iFile); os.IsNotExist(err) {
		fmt.Printf("Error: File '%s' does not exist.\n", iFile)
		os.Exit(1)
	}
	// Continue processing...
	fmt.Printf("Input file '%s' exist. Start Processing...\n", iFile)
}

// To extract all Defined Names from an excel file into another
func CreateParam(r *excelize.File, itemName string, f *excelize.File, sheet string) {
	// Get all defined names
	allNames := r.GetDefinedName()

	// Filter: only names that start with 'i' or 'o' (case-insensitive)
	var filteredNames []excelize.DefinedName
	for _, name := range allNames {
		lower := strings.ToLower(name.Name)
		if strings.HasPrefix(lower, "i") || strings.HasPrefix(lower, "o") ||
			strings.HasPrefix(lower, "z") || strings.HasPrefix(lower, "y") ||
			strings.HasPrefix(lower, "x") || strings.HasPrefix(lower, "w") ||
			strings.HasPrefix(lower, "v") {
			filteredNames = append(filteredNames, name)
		}
	}

	I1Value := "BCDFAGHE"
	param := "INSERT INTO gopro.params (company_id, name, item, rec_type, seqno, start_date, end_date, is_valid, data, last_mod_user, created_at, updated_at) VALUES ("
	paramdesc := "INSERT INTO gopro.param_descs (company_id,name,item,rec_type,language_id,shortdesc,longdesc,last_mod_user,created_at,updated_at) VALUES "

	// Write to I1 and K1
	f.SetCellValue(sheet, "I1", I1Value)
	f.SetCellValue(sheet, "K1", param)

	// Param and Desc static values
	companyID := 1
	name := "E0002"
	item := itemName
	recType := "IT"

	seqNo := 0
	startDate := "19000101"
	endDate := "20990101"
	isValid := 1
	dataPrefix := "{\"fieldArray\":["

	languageID := 1
	shortDesc := itemName
	longDesc := itemName

	// Construct the param & paramdesc SQL data field string
	paramdata := fmt.Sprintf(
		"%d,'%s','%s','%s',%d,'%s','%s',%d,'%s",
		companyID, name, item, recType, seqNo,
		startDate, endDate, isValid, dataPrefix,
	)

	//log.Println(paramdata)
	datime := time.Now().Format("2006-01-02 15:04:05")
	dataSuffix := "]}', 1, '" + datime + "', '" + datime + "');"

	paramdescdata := fmt.Sprintf(
		"(%d,'%s','%s','%s',%d,'%s','%s',%d,'%s','%s');",
		companyID, name, item, recType, languageID,
		shortDesc, longDesc, 1, datime, datime,
	)
	//log.Println(paramdescdata)

	// Write to row 2 (A2 to H2 & K2)
	f.SetCellValue(sheet, "A2", companyID)
	f.SetCellValue(sheet, "B2", name)
	f.SetCellValue(sheet, "C2", item)
	f.SetCellValue(sheet, "D2", recType)
	f.SetCellValue(sheet, "E2", seqNo)
	f.SetCellValue(sheet, "F2", startDate)
	f.SetCellValue(sheet, "G2", endDate)
	f.SetCellValue(sheet, "H2", isValid)
	f.SetCellValue(sheet, "K2", paramdata)

	// Row 3 Header fields
	tjsonName := "jsonName"
	texcelName := "excelName"
	tfieldMode := "fieldMode"
	tfieldType := "fieldType"
	touterKeys := "outerKeys"
	tinnerKeys := "innerKeys"
	tmandatory := "mandatory"
	torientation := "orientation"

	// Header row in row 3
	headers := []string{tjsonName, texcelName, tfieldMode, tfieldType, touterKeys, tinnerKeys, tmandatory, torientation}
	for i, h := range headers {
		cell, _ := excelize.CoordinatesToCellName(i+1, 3) // Column index starts from 1, row = 3
		f.SetCellValue(sheet, cell, h)
	}

	// Detail fields except Name and RefersTo fields
	fieldMode := 0
	fieldType := 0
	outerKeys := ""
	innerKeys := ""
	mandatory := true
	orientation := 0
	colIblank := ""
	colJblank := ""
	sqlline := ""
	namecount := len(filteredNames)
	row := 0

	// Write filtered data starting from row 4
	for i, name := range filteredNames {
		row = i + 4
		lower := strings.ToLower(name.Name)
		fieldMode = 0
		if strings.HasPrefix(lower, "o") {
			fieldMode = 1
		}
		fieldType = 0
		orientation = 0
		if strings.HasPrefix(lower, "z") {
			fieldMode = 1
			fieldType = 1
			orientation = 1
		}
		if strings.HasPrefix(lower, "y") {
			fieldMode = 1
			fieldType = 2
			orientation = 1
		}
		if strings.HasPrefix(lower, "x") {
			fieldMode = 1
			fieldType = 3
			orientation = 1
		}
		if strings.HasPrefix(lower, "w") {
			fieldMode = 1
			fieldType = 4
			orientation = 1
		}
		if strings.HasPrefix(lower, "v") {
			fieldMode = 1
			fieldType = 5
			orientation = 1
		}

		// Use a map to build your JSON structure
		data := map[string]interface{}{
			tjsonName:    name.Name,
			texcelName:   name.Name,
			tfieldMode:   fieldMode,
			tfieldType:   fieldType,
			touterKeys:   outerKeys,
			tinnerKeys:   innerKeys,
			tmandatory:   mandatory,
			torientation: orientation,
		}

		// Convert map to JSON
		jsonBytes, err := json.Marshal(data)
		if err != nil {
			panic(err)
		}

		// Final JSON string
		a := string(jsonBytes)
		if i != (namecount - 1) {
			sqlline = a + ","
		} else {
			sqlline = a
		}

		values := []interface{}{
			name.Name,   // jsonName    col A
			name.Name,   // excelName   col B
			fieldMode,   // fieldMode   col C
			fieldType,   // fieldType   col D
			outerKeys,   // outerKeys   col E
			innerKeys,   // innerKeys   col F
			mandatory,   // mandatory   col G
			orientation, // orientation col H
			colIblank,   // blank       col I
			colJblank,   // blank       col J
			sqlline,     // sql line    col K
		}

		for colIdx, val := range values {
			cell, _ := excelize.CoordinatesToCellName(colIdx+1, row)
			f.SetCellValue(sheet, cell, val)
		}

	}

	cell, _ := excelize.CoordinatesToCellName(11, row+1)
	f.SetCellValue(sheet, cell, dataSuffix)

	cell, _ = excelize.CoordinatesToCellName(11, row+4)
	f.SetCellValue(sheet, cell, paramdesc)

	cell, _ = excelize.CoordinatesToCellName(11, row+5)
	f.SetCellValue(sheet, cell, paramdescdata)
	// end of param creation
}

func CopyTemplate(r *excelize.File, itsheet string, f *excelize.File, otsheet string) {

	// Read rows from the sheet
	rows, err := r.GetRows(itsheet)
	if err != nil {
		log.Fatalf("failed to read input sheet: %v", err)
	}

	// Copy styles and values
	for rowIdx, row := range rows {
		for colIdx, cellValue := range row {
			cellRef, _ := excelize.CoordinatesToCellName(colIdx+1, rowIdx+1)

			// Copy value
			if err := f.SetCellValue(otsheet, cellRef, cellValue); err != nil {
				log.Fatalf("Failed to write cell value: %v", err)
			}
			// Copy style (convert from source to target workbook)
			styleID, err := r.GetCellStyle(itsheet, cellRef)
			if err == nil {
				styleJSON, err := r.GetStyle(styleID)
				if err == nil {
					newStyleID, err := f.NewStyle(styleJSON)
					if err == nil {
						if err := f.SetCellStyle(otsheet, cellRef, cellRef, newStyleID); err != nil {
							log.Printf("Warning: failed to apply style for %s: %v", cellRef, err)
						}
					} else {
						log.Printf("Warning: failed to create style for %s: %v", cellRef, err)
					}
				} else {
					log.Printf("Warning: failed to get style JSON for %s: %v", cellRef, err)
				}
			} else {
				log.Printf("Warning: failed to get cell style for %s: %v", cellRef, err)
			}
		}

		// Copy merged cells
		merged, err := r.GetMergeCells(itsheet)
		if err == nil {
			for _, m := range merged {
				if err := f.MergeCell(otsheet, m.GetStartAxis(), m.GetEndAxis()); err != nil {
					log.Printf("Warning: failed to merge cells %s:%s: %v", m.GetStartAxis(), m.GetEndAxis(), err)
				}
			}
		}

		// Copy column widths
		for col := 'A'; col <= 'Z'; col++ {
			colName := string(col)
			width, err := r.GetColWidth(itsheet, colName)
			if err == nil {
				f.SetColWidth(otsheet, colName, colName, width)
			}
		}
	}

}

func SetDefinedNames(r *excelize.File, itsheet string, f *excelize.File, otsheet string) {

	// Read rows from the sheet
	rows, err := r.GetRows(itsheet)
	if err != nil {
		log.Fatalf("failed to read sheet: %v", err)
	}

	// Map cell references to defined names
	nameToRef := map[string]string{}
	for _, name := range r.GetDefinedName() {
		ref := strings.TrimPrefix(name.RefersTo, "=")
		ref = strings.ReplaceAll(ref, "'", "")

		if strings.HasPrefix(ref, itsheet+"!") {
			ref = strings.TrimPrefix(ref, itsheet+"!")
			ref = strings.ReplaceAll(ref, "$", "")
			nameToRef[ref] = name.Name
		}
	}

	// Loop and write processed rows
	for rowIdx, row := range rows {
		for colIdx, cell := range row {
			cellRef, _ := excelize.CoordinatesToCellName(colIdx+1, rowIdx+1)

			displayText := sanitize(cell)
			for ref, name := range nameToRef {
				if ref == cellRef || isCellInRange(cellRef, ref) {
					displayText = fmt.Sprintf("<%s>", name)
					break
				}
			}

			if err := f.SetCellValue(otsheet, cellRef, displayText); err != nil {
				log.Fatalf("failed to write to output Excel: %v", err)
			}
		}
	}

}

var cellCache sync.Map // or map[string]string with mutex

func GetResolvedCellValueCached(r *excelize.File, sheet, cell string) (string, error) {
	key := sheet + "!" + cell
	if val, ok := cellCache.Load(key); ok {
		return val.(string), nil
	}

	val, err := r.GetCellValue(sheet, cell)
	if err != nil {
		return "", err
	}

	if strings.HasPrefix(val, "=") {
		val, err = r.CalcCellValue(sheet, cell)
		if err != nil {
			return "", err
		}
	}

	cellCache.Store(key, val)
	return val, nil
}

func isLikelyDate(s string) bool {
	match, _ := regexp.MatchString(`^\d{2}-\d{2}-\d{2}$`, s)
	return match
}

func normalizeDate(s string) string {
	t, err := time.Parse("02-01-06", s)
	if err != nil {
		return s // fallback to original if parsing fails
	}
	return t.Format("02-01-2006")
}

func isLikelyAmount(s string) bool {
	return regexp.MustCompile(`^\s*[\d,]+\s*$`).MatchString(s)
}

func parseAmount(s string) int {
	s = strings.ReplaceAll(s, ",", "")
	s = strings.TrimSpace(s)
	i, err := strconv.Atoi(s)
	if err != nil {
		return 0 // fallback if it can't be parsed
	}
	return i
}
func CreateJsonFile(r *excelize.File, isheet string, jFile string) {
	osheet := isheet + "-json"
	r.NewSheet(osheet)
	idx, _ := r.GetSheetIndex(isheet)
	odx, _ := r.GetSheetIndex(osheet)
	r.SetActiveSheet(odx)

	err := r.CopySheet(idx, odx)
	if err != nil {
		log.Fatalf("Failed to copy sheet: %v", err)
	}

	rows, _ := r.GetRows(osheet)
	for rowIdx, row := range rows {
		for colIdx, _ := range row {
			cell, _ := excelize.CoordinatesToCellName(colIdx+1, rowIdx+1)

			val, err := GetResolvedCellValueCached(r, osheet, cell)
			if err != nil {
				val = "" // or skip/log
			}
			r.SetCellValue(osheet, cell, val) // Paste-as-value
		}
	}

	var sheet string
	var cell string
	// Extract defined names starting with 'i' from isheet
	result := make(map[string]interface{})
	for _, name := range r.GetDefinedName() {
		if !strings.HasPrefix(name.Name, "i") {
			continue
		}
		ref := strings.TrimPrefix(name.RefersTo, "=")
		parts := strings.Split(ref, "!")
		if len(parts) != 2 {
			continue
		}
		sheet = strings.Trim(parts[0], "'")
		cell = strings.ReplaceAll(parts[1], "$", "")

		if sheet != isheet {
			continue
		}

		// Get value
		val, _ := r.GetCellValue(osheet, cell)
		label := name.Name
		if label != "" {
			var parsedVal interface{}
			cleanVal := strings.TrimSpace(val)

			// Attempt to identify and parse known date format: dd-mm-yy
			if isLikelyDate(cleanVal) {
				parsedVal = normalizeDate(cleanVal) // Converts "02-01-84" → "02-01-1984"
			} else if isLikelyAmount(cleanVal) {
				parsedVal = parseAmount(cleanVal) // Converts "30,000" → 30000 (int)
			} else if i, err := strconv.Atoi(cleanVal); err == nil {
				parsedVal = i
			} else if f, err := strconv.ParseFloat(cleanVal, 64); err == nil {
				parsedVal = f
			} else {
				parsedVal = cleanVal
			}
			result[label] = parsedVal
		}
	}

	// Write result to JSON
	jsonBytes, _ := json.MarshalIndent(result, "", "  ")
	if err := os.WriteFile(jFile, jsonBytes, 0644); err != nil {
		log.Fatalf("Failed to write JSON file: %v", err)
	}

	log.Println("JSON output created successfully as ", jFile)

}

// // Main //////////
func main() {
	var iFile string
	var oFile string
	var jFile string
	var itemName string
	var isheet string
	var itsheet string

	// Check the number of command-line arguments
	if len(os.Args) > 7 {
		fmt.Println("Error: Too many arguments provided. Please provide <itemName> <iFile> <isheet> <itsheet> <oFile> <jFile>...")
		fmt.Println("Usage: cmd <itemName> <iFile> <isheet> <itsheet> <oFile> <jFile> ...")
	} else if len(os.Args) == 7 {
		itemName = os.Args[1]
		iFile = os.Args[2] + ".xlsx"
		isheet = os.Args[3]
		itsheet = os.Args[4]
		oFile = os.Args[5] + "-out.xlsx"
		jFile = os.Args[6] + "-input.json"
	} else if len(os.Args) == 6 {
		itemName = os.Args[1]
		iFile = os.Args[2] + ".xlsx"
		isheet = os.Args[3]
		itsheet = os.Args[4]
		oFile = os.Args[5] + "-out.xlsx"
		jFile = os.Args[2] + "-input.json"
	} else if len(os.Args) == 5 {
		itemName = os.Args[1]
		iFile = os.Args[2] + ".xlsx"
		isheet = os.Args[3]
		itsheet = os.Args[4]
		oFile = os.Args[2] + "-out.xlsx"
		jFile = os.Args[2] + "-input.json"
	} else if len(os.Args) == 4 {
		itemName = os.Args[1]
		iFile = os.Args[2] + ".xlsx"
		isheet = os.Args[3]
		itsheet = "Output"
		oFile = os.Args[2] + "-out.xlsx"
		jFile = os.Args[2] + "-input.json"
	} else if len(os.Args) == 3 {
		itemName = os.Args[1]
		iFile = os.Args[2] + ".xlsx"
		isheet = "Input"
		itsheet = "Output"
		oFile = os.Args[2] + "-out.xlsx"
		jFile = os.Args[2] + "-input.json"
	} else if len(os.Args) == 2 {
		fmt.Printf("Error: No InputFile provided.\n")
		os.Exit(1)
	} else {
		fmt.Printf("Error: No arguments provided.\n")
		os.Exit(1)
	}

	// Check if the required input file exist
	checkInputFilesExist(iFile)
	fmt.Println("  In Progress...")

	inputFile := iFile
	r, err := excelize.OpenFile(inputFile)
	if err != nil {
		log.Fatalf("Failed to open file: %v", err)
	}

	// Create a new Output Excel file with param and template sheets
	// for inserting param record and create word docx template for gohtml creation
	f := excelize.NewFile()

	params := "params"
	s1, err := f.NewSheet(params)
	if err != nil {
		log.Fatalf("Failed to create new sheet: %v", err)
	}
	f.SetActiveSheet(s1)

	CreateParam(r, itemName, f, params)

	template := "template"
	s2, err := f.NewSheet(template)
	if err != nil {
		log.Fatalf("Failed to create new sheet: %v", err)
	}

	f.SetActiveSheet(s2)

	CopyTemplate(r, itsheet, f, template)
	SetDefinedNames(r, itsheet, f, template)
	CreateJsonFile(r, isheet, jFile)

	// Save the output file
	outputFile := oFile
	f.DeleteSheet("Sheet1") // Remove default
	if err := f.SaveAs(outputFile); err != nil {
		log.Fatalf("Failed to save output Excel file: %v", err)
	}

	log.Printf("Param and Template sheets are written to '%s'\n", outputFile)

}
