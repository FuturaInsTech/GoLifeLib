// From MS HTM file to Web HTML file
// Replace <span class=SpellE> tags around variables

package main

import (
	"fmt"
	"io"
	"os"
	"regexp"
	"strings"
)

// Function to check if required files exist
func checkInputFilesExist(arg string) {

	jFile := arg + ".json"
	hFile := ""
	// Check for JSON file
	if _, err := os.Stat(jFile); os.IsNotExist(err) {
		fmt.Printf("Error: File '%s' does not exist.\n", jFile)
		os.Exit(1)
	}
	// File names to check depending upon runopt value
	hFile = arg + ".gohtml"

	// Check for HTML File it shall be htm or html or gohtml depending on runopt
	if _, err := os.Stat(hFile); os.IsNotExist(err) {
		fmt.Printf("Error: File '%s' does not exist.\n", hFile)
		os.Exit(1)
	}
	// Continue processing...
	fmt.Printf("Both files '%s' and '%s' exist. Start Processing...\n", jFile, hFile)
}

// JoinHTMLAttributes takes a multi-line HTML string and joins attributes into a single line.
func JoinHTMLAttributes(html string) string {
	// Preserve blank lines by temporarily marking them
	placeholder := "__BLANK_LINE__"
	compactHTML := strings.ReplaceAll(html, "\n\n", placeholder)

	// Remove all remaining single newlines (join lines)
	re := regexp.MustCompile(`\n+`)                     // Match one or more newlines
	compactHTML = re.ReplaceAllString(compactHTML, " ") // Replace newlines with space

	// Restore blank lines
	compactHTML = strings.ReplaceAll(compactHTML, placeholder, "\n\n")

	// Remove newlines and excessive whitespace
	compactHTML = regexp.MustCompile(`\s{2,}`).ReplaceAllString(compactHTML, " ") // Collapse multiple spaces

	// Trim any unnecessary spaces at the start or end
	return strings.TrimSpace(compactHTML)
}

// Function to clean <o:p></o:p> tags to manage blank lines
// Used in htm2html processing
func cleanOEmptyP(input string) string {
	// Regex pattern to match <o:p></o:p> (with optional spaces)
	re := regexp.MustCompile(`(?i)<o:p>\s*</o:p>`)
	// Remove the matched tag instead of replacing it with blank
	a := re.ReplaceAllString(input, "")

	// Replace <o:p>&nbsp;</o:p> with <p>&nbsp;</p> to ensure blank lines render correctly
	re = regexp.MustCompile(`<o:p>\s*&nbsp;\s*</o:p>`)
	// Replace the matched tag with <br>
	return re.ReplaceAllString(a, "<br>")
}

// Replace v:imagedata Tags with img tag
// Used in htm2html processing
func ReplaceImageDataTagWithImgTag(input string) string {
	// Regular expression to find <v:imagedata ... />
	re := regexp.MustCompile(`<v:imagedata([^>]*)\/?>`)
	// Replace matches with the content inside the tags
	return re.ReplaceAllString(input, `<img${1}/>`)
}

// Strip SpellE SpanTags removes Spelling Eror non-standard tags but keeps others.
// Used in htm2html processing
func StripSpellESpanTags(input string) string {
	// Regular expression to match <span> tags with class=SpellE
	re := regexp.MustCompile(`(?i)<span[^>]*class\s*=\s*["']?SpellE["']?[^>]*>(.*?)</span>`)
	// Replace matches with the content inside the tags
	return re.ReplaceAllString(input, `$1`)
}

// Strip GramE SpanTags removes Grammer Eror non-standard tags but keeps others.
// Used in htm2html processing
func StripGramESpanTags(input string) string {
	// Regular expression to match <span> tags with class=GramE
	re := regexp.MustCompile(`(?i)<span[^>]*class\s*=\s*["']?GramE["']?[^>]*>(.*?)</span>`)
	// Replace matches with the content inside the tags
	return re.ReplaceAllString(input, `$1`)
}

func processHTMLFile(inputFilePath, outputFilePath string) {
	// Open the input file
	inputFile, err := os.Open(inputFilePath)
	if err != nil {
		fmt.Printf("Error opening input file: %v\n", err)
		return
	}
	defer inputFile.Close()

	// Read the input file content
	content, err := io.ReadAll(inputFile)
	if err != nil {
		fmt.Printf("Error reading input file: %v\n", err)
		return
	}

	// JoinHTMLAttributes takes a multi-line HTML string and joins attributes into a single line
	joinedContent := JoinHTMLAttributes(string(content))

	// Correct HTM file tags for HTML standards.....
	// 1. Replacing v:imagedata tags with img tag & <o:p>&nbsp</o:p> with <br> tag
	// 2. Removing Spelling & Grammer Error nonstandard tags
	firstpassContent := cleanOEmptyP(string(joinedContent))
	secondpassContent := ReplaceImageDataTagWithImgTag(string(firstpassContent))
	thirdpassContent := StripSpellESpanTags(string(secondpassContent))
	processedContent := StripGramESpanTags(string(thirdpassContent))
	// End of Corrections

	// Write the processed content to the output file
	err = os.WriteFile(outputFilePath, []byte(processedContent), 0644)
	if err != nil {
		fmt.Printf("Error writing to output file: %v\n", err)
		return
	}

	fmt.Printf("Processed HTML content written to %s\n", outputFilePath)
}

func main() {
	var inputFile string
	var outputFile string

	var iFile string

	// Check the number of command-line arguments
	if len(os.Args) > 2 {
		fmt.Println("Error: Too many arguments provided. Please provide <basefilename> ...")
		fmt.Println("Usage: cmd <basefilename> ...")
	} else if len(os.Args) == 2 {
		iFile = os.Args[1]
	} else {
		fmt.Printf("Error: No arguments provided.\n")
		os.Exit(1)
	}

	inputFile = iFile + ".htm"
	outputFile = iFile + ".html"

	// Check if the required files exist
	checkInputFilesExist(iFile)
	fmt.Println("  In Progress...")

	htm2html(inputFile, outputFile)
}

func htm2html(inputFile string, outputFile string) {
	// Input and output file paths
	inputFilePath := inputFile
	outputFilePath := outputFile

	// Process the file
	processHTMLFile(inputFilePath, outputFilePath)

	fmt.Println("HTML generated successfully: ", outputFile)
}
